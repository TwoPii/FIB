library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use work.campo_rt.all;

entity decoIMM is 						-- decodificacion de la instrucciones RIMM
	port(INST: in std_logic_vector (31 downto 0);
		Senca: out std_logic_vector (26 downto 0));
end;

architecture comportamiento of decoIMM is
-- seleccion en multiplexores
  -- mIE: registro destino
  constant mIERD: std_logic_vector(1 downto 0) := "00";
  constant mIERT: std_logic_vector(1 downto 0) := "01";
  constant MIE31: std_logic_vector(1 downto 0) := "10";

  -- mL1: salida pueto L1 o literal
  constant mL1R: std_logic := '0';
  constant mL1I: std_logic := '1';
  
  -- mL2: salida pueto L2 o literal
  constant mL2R: std_logic := '0';
  constant mL2I: std_logic := '1';

  -- mES: actualizacion del banco de registros  
  constant mESALU: std_logic_vector(1 downto 0) := "00";
  constant mESMEM: std_logic_vector(1 downto 0) := "01";
  constant mESRET: std_logic_vector(1 downto 0) := "10";
  
-- seleccion en formateador (FMT)
  constant litExtSig: std_logic_vector(1 downto 0) := "00";
  constant litExtZero: std_logic_vector(1 downto 0) := "01";
  constant litlui: std_logic_vector(1 downto 0) := "10";
  constant litshamt: std_logic_vector(1 downto 0) := "11";
  
-- permiso de escritura en el banco de registros
   constant peEsreg: std_logic := '1';

-- secuenciamiento absoluto
--   constant secabs: std_logic := '1';

-- secuenciamiento indexado
--   constant secinde: std_logic := '1';


-- opalu: operacion en la alu. Codificacion
--         opalu: out STD_LOGIC_VECTOR (4 downto 0);
         
-- opMD: operacion en memoria. Codificacion: bit mas significativo indica acceso a memoria, 
-- siguientes cuatro bits, menos significativos, son los cuatro bits
-- menos significativos del codigo de operacion
-- opMD: out std_logic_vector (4 downto 0):= '1'& opA(0) & opB
   constant decMD: std_logic := '1';  
       
-- opsec: operacion de secuenciamiento. Codificacion: el bits mas significativo indica
-- instruccion de secuenciamiento condicional, loa tres bits menos significativos son
-- los tres bits menos significativos del codigo de operacion o los tres bits menos
-- significativos del campo RT.
-- opsec: out std_logic_vector (3 downto 0):= '1' & opB;si es del tipo RGIMM '1' & RTB
   constant decs: std_logic := '1';           

-- encaminamiento en la unidad de calculo
signal   mIE :  std_logic_vector (1 downto 0);
signal   PBR :  STD_LOGIC;
signal   liter:  std_logic_vector (1 downto 0);
signal   mL1:  STD_LOGIC;
signal   mL2:  STD_LOGIC;
signal   mES:  std_logic_vector (1 downto 0);
-- encaminamiento en la unidad de secuenciamiento                        
signal   mA:  STD_LOGIC;
signal   mI:  STD_LOGIC;
-- control de la alu, memoria y secuencimaiento
signal   opalu:  std_logic_vector (4 downto 0);
signal   opMD:  std_logic_vector (4 downto 0);
signal   opsec:  std_logic_vector (3 downto 0);
-- situaciones de error                  
signal   CoErr:  std_logic ;
signal   parar:  std_logic;

begin

PdecoIMM:process(INST)                         
variable rt:  std_logic_vector (4 downto 0);
variable rtA: std_logic_vector (1 downto 0);
variable rtB: std_logic_vector (2 downto 0);
variable Erta, Ertb: integer;
    
begin
	rt := INST(20 downto 16);
	rtA:= INST(20 downto 19);
	rtB:= INST (18 downto 16);
       
	mIE <= "00";
	PBR <= '0';
	liter <= litExtSig;    
	mL1 <= '0';
	mL2 <= '0';
	mES <= "00";
            
	mA <= '0';
	mI <= '0';

	opalu <= "00"&"000";
	opMD <= "00000";
	opsec <= "0000";

	CoErr <= '0';       
	parar <= '0';
      
-- control de encaminamiento y permisos de escritura       
	ErtA := conv_integer(rtA);
	case ErtA is
		when ARTCERO =>						 -- rt: Bits BAJOS correspondientes a bits ALTOS = ARTCERO
			ErtB := conv_integer(rtB);
			case ErtB is
				when Bbltz | Bbgez =>		-- bltz branch if less than zero
					opsec <= decs & rtB;	-- bgez branch if greater than or equal zero
				when others => 
					CoErr <= '1';
			end case;
		when ARTDOS =>						-- rt: Bits BAJOS correspondientes a bits ALTOS = ARTDOS   
			ErtB := conv_integer(rtB);
			case ErtB is
				when Bbltzal | Bbgezal =>	-- bltzal branch if less than zero and link
					mIE <= "10";			-- bgezal branch if greater than or equal zero and link
					PBR <= peEsreg;
					mES <= "10";
					opsec <= decs & rtB;
				when others => 
					CoErr <= '1';
			 end case;
		when others => 
			CoErr <= '1';
	end case;
end process PdecoIMM;
  
      Senca <= mIE & PBR & liter & mL1 & mL2 & mES & mA & mI& opalu & opMD & opsec & CoErr & parar;
end;


 