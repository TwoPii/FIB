library ieee;
use ieee.std_logic_1164.all;

entity controlador is
	generic (retardo: time := 4 ns);
	port (
		reloj, pcero: in std_logic;
		-- Pcero senal de puesta a cero
		LES: in std_logic; -- Interface con el procesador
		PET: in std_logic;
		LISTO: out std_logic;
		AFP: in std_logic; -- Interface con modulo campos
		AFO: in std_logic; -- Acierto/Fallo observador
		PED: out std_logic; -- y elementos perifericos
		PEET: out std_logic;
		PEV: out std_logic;
		valinP: in std_logic;
		valinO: in std_logic;
		valout: out std_logic;
		muxL: out std_logic;
		muxE: out std_logic;
		muxO: out std_logic;
		muxM: out std_logic; -- Direccion que se envia a memoria
		MLES: out std_logic; -- Interface con memoria
		MPET: out std_logic;
		MLISTO: in std_logic;

		BMLES: in std_logic;
		BMPET: in std_logic;

		MOD: out std_logic; -- Escritura entre caches

		CONC: in std_logic; -- Concesion bus
		FIN: out std_logic; -- Finalizar transaccion
		PETBUS: out std_logic;

		VEST: out std_logic_vector (3 downto 0);
		VESTO: out std_logic_vector (1 downto 0)
		); -- Observacion externa del estado
end;

architecture comportamiento of controlador is
	constant UNO : std_logic := '1'; -- Constantes para establecer
	constant CERO : std_logic := '0'; -- y comprobar valores
	constant lectura : std_logic := '1';
	constant escritura : std_logic := '0';
	constant acierto : std_logic := '1';
	constant fallo : std_logic := '0';
	constant PETICION : std_logic := '1';
	constant NOPETICION : std_logic := '0';
	-- observacion externa del estado
	constant VESTLIST: std_logic_vector :="1000"; -- Estado LISTO
	constant VESTREEM: std_logic_vector :="0100"; -- Estado REEM
	constant VESTLECT: std_logic_vector :="0010"; -- Estado LEC
	constant VESTESCR: std_logic_vector :="0001"; -- Estado ESC
	constant VESTLR: std_logic_vector :="0110"; -- Estado LR
	constant VESTLL: std_logic_vector :="1010"; -- Estado LL

	type tipoestado is (LIST, LR, REEM, LL, LECT, ESCR); -- Estados
	signal estado, prxestado: tipoestado; -- Registro de estado

-- senales temporales en el proceso de salida, sin sincronizar con la senal de reloj,
-- correspondientes a las PED, PEV y PEET
	signal TPED: std_logic :='1';
	signal PEVP: std_logic :='1';
	signal TPEET: std_logic :='1';

	signal LISP: std_logic:='1';
	signal vaP: std_logic:='1';

-- OBSERVADOR
-- Observacion externa del estado del Obs.
	constant VESTDESOB: std_logic_vector :="10"; -- Estado DESO
	constant VESTESPOB: std_logic_vector :="01"; -- Estado ESPO
	type tipoestadoO is (DESO, ESPO); -- Estados del automata del observador
	signal estado_O, prxestado_O: tipoestadoO; -- Registro de estado del observador
-- senales temporales en el proceso de salida del observador, sin sincronizar con la senal de reloj,
-- correspondiente a PEVO
	signal PEVO: std_logic :='1';
-- observador: senal para establecer el estado (listo y val)
	signal LISO: std_logic :='1';
	signal vaO: std_logic :='1';
-- multiplexores. Seleccion entre la salida del procesador y la salida del observador
	signal muxva: std_logic; -- seleccion de la senal val
	signal muxEV: std_logic; -- seleccion de la senal PEV
	signal muxLI: std_logic; -- selec. de la senal LISTO del proc. u obs.
	signal TPEV: std_logic; -- senal de salida del multiplexor muxEV

-- deteccion de flanco ascendente
	function flanco_ascendente (signal reloj: std_logic) return boolean is
		variable flanco: boolean:= FALSE;
		begin
			flanco := (reloj = '1' and reloj'event);
			return (flanco);
	end flanco_ascendente;

begin
-- registro de estado
	process (reloj, pcero)
		begin
			if pcero = UNO then
				VEST <= VESTLIST after retardo;
			elsif (reloj = UNO and reloj'event) then
				estado <= prxestado after retardo;
				case prxestado is
					when LIST => VEST <= VESTLIST after retardo;
					when REEM => VEST <= VESTREEM after retardo;
					when LECT => VEST <= VESTLECT after retardo;
					when ESCR => VEST <= VESTESCR after retardo;
					when LR => VEST <= VESTLL after retardo;
					when LL => VEST <= VESTLR after retardo;
				end case;
			end if;
	end process;

-- logica de proximo estado
	process(estado, LES, PET, AFP, MLISTO, valinP, CONC, pcero)
		begin
			prxestado <= estado after retardo;
			if pcero = CERO then
				case estado is
					when LIST =>
						if PET = PETICION and AFP = fallo then
							if val = UNO then
								prxestado <= LR after retardo;
							else
								prxestado <= LL after retardo;
							end if;
						end if;
					when LR =>
						if CONC = UNO then
							if valinP = UNO then
								prxestado <= REEM after retardo;
							else
								prxestado <= LECT after retardo;
							end if;
						end if;
					when REEM =>
						if MLISTO = UNO then
							prxestado <= LECT after retardo;
						end if;
					when LL =>
						if CONC = UNO then
							prxestado = LECT after retardo;
						end if;
					when LECT =>
						if MLISTO = UNO then
							if LES = escritura then
								prxestado <= ESCR after retardo;
							else
								prxestado <= LIST after retardo;
							end if;
						end if;
					when ESCR =>
						prxestado <= LIST after retardo;
				end case;
			else
				prxestado <= LIST after retardo;
			end if;
	end process;

-- logica de salida
	process(estado, LES, PET, AFP, MLISTO, valinP, CONC, pcero)
		begin
			LISP <= UNO after retardo;
			MPET <= CERO after retardo;
			TPED <= (PET and AFP and not LES) after retardo;
			TPEET <= CERO after retardo;
			PEVP <= CERO after retardo;
			muxL <= CERO after retardo;
			muxE <= CERO after retardo;
			MLES <= LES after retardo;
			vaP <= CERO after retardo;
			FIN <= CERO after retardo;
			muxM <= CERO after retardo;
			PETBUS <= CERO after retardo;
			if (pcero = CERO) then
				case estado is
					when LIST =>
						if PET = PETICION and AFP = fallo then
							LISP <= CERO after retardo;
							PETBUS <= UNO after retardo;
						end if;
					when LR =>
						LISP <= CERO after retardo;
						TPED <= CERO after retardo;
						if CONC = UNO then
							MPET <= UNO after retardo;
							MLES <= not valinP after retardo;
							muxM <= valinP after retardo;
						end if;
					when REEM =>
						LISP <= CERO after retardo;
						MPET <= MLISTO after retardo;
						MLES <= MLISTO after retardo;
						TPED <= CERO after retardo;
					when LL =>
						LISP <= CERO after retardo;
						TPED <= CERO after retardo;
						if CONC = UNO then
							MPET <= UNO after retardo;
							MLES <= UNO after retardo;
						end if;
					when LECT =>
						if MLISTO = UNO then
							LISP <= LES after retardo;
							TPEET <= UNO after retardo;
							TPED <= UNO after retardo;
							PEVP <= UNO after retardo;
							vaP <= UNO after retardo;
							muxL <= UNO after retardo;
							muxE <= UNO after retardo;
							FIN <= LES after retardo;
						else
						    LISP <= CERO after retardo;
							TPED <= CERO after retardo;
						end if;
					when ESCR =>
						TPED <= UNO after retardo;
						FIN <= UNO after retardo;
				end case;
			end if;
	end process;

-- OBSERVADOR
-- registro de estado del observador
	est_obs: process (reloj, pcero)
		begin
			if (pcero = UNO) then
				estado_O <= DESO after retardo;
				VESTO <= VESTDESOB after retardo;
			elsif (flanco_ascendente(reloj)) then
				estado_O <= prxestado_O after retardo;
				case prxestado_O is
					when DESO => VESTO <= VESTDESOB after retardo;
					when ESPO => VESTO <= VESTESPOB after retardo;
				end case;
			end if;
		end process est_obs;

	-- logica de proximo estado del observador
	prox_obs: process(estado_O, BMPET, AFO, MLISTO)
		begin
			prxestado_O <= DESO after retardo;
			case estado_O is
				when DESO =>
					if (BMPET = PETICION and AFO = acierto) then
						prxestado_O <= ESPO after retardo;
					end if;
				when ESPO =>
					if MLISTO = CERO then
						prxestado_O <= ESPO after retardo;
					end if;
			end case;
		end process prox_obs;

	-- logica de salida del observador
	sal_proc: process(estado_O, BMPET, AFO, MLISTO)
		begin
			PEVO <= CERO after retardo;
			vaO <= CERO after retardo;
			LISO <= UNO after retardo;
			MOD <= CERO after retardo;
				case estado_O is
					when DESO =>
						if (BMPET = PETICION and AFO = acierto) then
							LISO <= CERO after retardo;
							MOD <= UNO after retardo;
						end if;
					when ESPO =>
						if MLISTO = UNO then
							PEVO <= UNO after retardo;
						else
							LISO <= CERO after retardo
							MOD <= UNO after retardo;
						end if;
					when others =>
						LISO <= CERO after retardo;
				end case;
		end process sal_proc;

	-- seleccion de las senales del procesador o del observador
	muxva <= not CONC; -- modelado ideal
	muxEV <= not CONC; -- la cache atiendo al procesador u observa
	muxLI <= not CONC; -- se utiliza la senal PET como de concesion
	LISTO <= LISP after retardo when muxLI = CERO else -- multiplexor muxLI
	LISO after retardo;
	valout <= vaP after retardo when muxva = CERO else -- multiplexor muxva
	vaO after retardo;
	TPEV <= PEVP after retardo when muxEV = CERO else -- multiplexor muxEV
	PEVO after retardo;

-- actualizacion de cache
PED <= not (TPED and (not reloj)) after retardo;
PEET <= not (TPEET and (not reloj)) after retardo;
PEV <= not (TPEV and (not reloj)) or pcero after retardo;
end;
